name: Terraform

on:
  push:
    branches: [ "master" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/test_terraform.yml'
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/test_terraform.yml'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    
    defaults:
      run:
        shell: bash
        # Set the working directory for all run steps
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials for Terraform operations
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.JAHID_GITHUB_CI_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.JAHID_GITHUB_CI_SECRET_KEY_ID }}
        aws-region: eu-west-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # Required secrets for S3 backend:
    # - TF_STATE_BUCKET: Name of the S3 bucket for Terraform state
    # - TF_LOCK_TABLE: Name of the DynamoDB table for state locking
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=eu-west-1" \
          -backend-config="use_lockfile=true" \
          -backend-config="encrypt=true"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Validates Terraform configuration
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      
    # On push to "master", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
